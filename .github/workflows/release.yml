# This file is part of ptsd project which is released under GNU GPL v3.0.
# Copyright (c) 2025- Limbus Traditional Mandarin

name: Synchronize and publish localized storylines

on:
  schedule:
    - cron: "0 21 * * SAT"
  workflow_dispatch:

env:
  # Change TARGET_DIR to the name of your output folder (e.g., cn, RU, Th etc.).
  # It must match the name in line 21 of the `src/ptsd/__init__.py` file.
  TARGET_DIR: "Hant"

jobs:
  download_and_merge:
    runs-on: ubuntu-latest
    env:
      PARATRANZ_TOKENS: ${{ secrets.PARATRANZ_TOKENS }}
    outputs:
      needs_release: ${{ steps.commit_changes.outputs.has_changes }}
    steps:
      - name: Checkout storyline branch
        uses: actions/checkout@v4
        with:
          ref: storyline
          path: storyline

      - name: Clean TARGET directory
        run: |
          rm -rf storyline/$TARGET_DIR
          mkdir -p storyline/$TARGET_DIR

      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: main-repo

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        working-directory: main-repo
        run: uv sync

      - name: Run merge script
        working-directory: main-repo
        run: uv run ptsd download --storyline-folder ../storyline
        env:
          PARATRANZ_TOKENS: ${{ env.PARATRANZ_TOKENS }}

      - name: Commit changes
        id: commit_changes
        working-directory: storyline
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add $TARGET_DIR/
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Auto-update $TARGET_DIR translations $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
            git push origin storyline
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  create_release:
    needs: download_and_merge
    if: needs.download_and_merge.outputs.needs_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      release_hash: ${{ steps.generate_metadata.outputs.full_hash }}
      release_tag: ${{ steps.generate_metadata.outputs.tag }}
    steps:
      - name: Checkout storyline branch
        uses: actions/checkout@v4
        with:
          ref: storyline
          fetch-depth: 0

      - name: Generate release metadata
        id: generate_metadata
        run: |
          TAG=$(date -u +%y%m%d)
          COMMIT_HASH=$(git log -1 --pretty=format:%h | head -c 4)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "full_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT

      - name: Clean existing tags
        env:
          RELEASE_TAG: ${{ steps.generate_metadata.outputs.tag }}
        run: |
          git fetch --tags
          if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
            git tag -d "$RELEASE_TAG"
            git push origin ":refs/tags/$RELEASE_TAG"
          fi

      - name: Create annotated tag
        env:
          RELEASE_TAG: ${{ steps.generate_metadata.outputs.tag }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "$RELEASE_TAG" -m "Automatic release $RELEASE_TAG"
          git push origin "$RELEASE_TAG"

      - name: Prepare release asset
        env:
          RELEASE_TAG: ${{ steps.generate_metadata.outputs.tag }}
          RELEASE_HASH: ${{ steps.generate_metadata.outputs.full_hash }}
        run: |
          mkdir -p BepInEx/plugins/LLC/Localize/$TARGET_DIR
          cp -r $TARGET_DIR/* BepInEx/plugins/LLC/Localize/$TARGET_DIR/
          zip -r "LTM_storyline_${RELEASE_TAG}_${RELEASE_HASH}.zip" BepInEx
          rm -rf BepInEx

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate_metadata.outputs.tag }}
          name: Release ${{ steps.generate_metadata.outputs.tag }}
          body: |
            - v${{ steps.generate_metadata.outputs.tag }} storyline update
            - Build Hash: ${{ steps.generate_metadata.outputs.full_hash }}
          files: LTM_storyline_${{ steps.generate_metadata.outputs.tag }}_${{ steps.generate_metadata.outputs.full_hash }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
